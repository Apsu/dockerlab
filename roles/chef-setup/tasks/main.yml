---
- name: Install git
  tags: git
  yum: name=git state=present
  when: ansible_os_family == "RedHat"

- name: Install git
  tags: git
  apt: name=git state=present
  when: ansible_os_family == "Debian"
 
- name: Install chef server
  tags: chef-server
  command: rpm -Uvh http://www.opscode.com/chef/download-server?p=el&pv={{ansible_lsb.major_release}}&m=x86_64&v={{chef_server_version}}
  register: output
  when: ansible_os_family == "RedHat"
  failed_when: output.rc not in [0,1]
  changed_when: output.rc == 0

- name: Download chef server package
  tags: chef-server
  get_url: url=http://www.opscode.com/chef/download-server?p=ubuntu&pv={{ansible_lsb.release}}&m=x86_64&v={{chef_server_version}} dest={{ansible_env.HOME}}/chef-server.deb
  when: ansible_os_family == "Debian"

- name: Install chef server
  tags: chef-server
  command: dpkg -i {{ansible_env.HOME}}/chef-server.deb
  when: ansible_os_family == "Debian"

- name: Configure chef server
  tags: chef-server
  command: chef-server-ctl reconfigure

- name: Configure path for knife
  tags: chef-server
  file:
    src: /opt/chef-server/embedded/bin/knife
    dest: /usr/local/bin/knife
    state: link

- name: Clone chef-cookbooks
  tags: 
  - git
  - upload
  - cookbooks
  git: repo={{cookbooks_repo}} dest={{ansible_env.HOME}}/chef-cookbooks version={{cookbooks_branch}}

- name: Configure knife
  tags: chef-server
  command: knife configure --yes --defaults --server-url https://127.0.0.1:443 --repository {{ansible_env.HOME}}/chef-cookbooks --user admin --key /etc/chef-server/admin.pem --admin-client-key /etc/chef-server/admin.pem --admin-client-name admin --validation-client-name chef-validator --validation-key /etc/chef-server/chef-validator.pem

- name: Upload cookbooks
  tags:
  - upload
  - cookbooks
  command: knife cookbook upload -a

- name: Upload roles
  tags:
  - upload
  - roles
  shell: chdir={{ansible_env.HOME}} knife role from_file chef-cookbooks/roles/*.rb
 
- name: Copy environment file
  tags:
  - upload
  - environment
  copy: src={{environment_file}} dest={{ansible_env.HOME}}/{{environment_file}}

- name: Upload environment
  tags:
  - upload
  - environment
  command: knife environment from_file {{environment_file}} chdir={{ansible_env.HOME}}
 
- name: Get node list
  tags:
  - nodes
  - bootstrap
  command: knife node list
  register: list
  changed_when: False # Doesn't apply

- name: Bootstrap nodes
  tags:
  - nodes
  - bootstrap
  command: knife bootstrap {{item}} --server-url https://{{ifaces.svc.ipv4}}:443
  register: bootstrap
  when: not item in list.stdout
  with_items: groups.cluster

- name: Wait for solr cache
  tags:
  - nodes
  - bootstrap
  command: knife exec -E "nodes.search('name:*') {|n| puts n.name}"
  when: bootstrap|changed
  register: output
  until: item in output.stdout
  retries: 10
  delay: 10
  with_items: groups.cluster
  changed_when: output.stdout

- name: Set node environments
  tags:
  - nodes
  - environment
  command: knife exec -E "nodes.search('name:*') {|n| n.chef_environment('{{chef_environment}}'); puts n.name; n.save}"
  register: output
  changed_when: output.stdout != ""

- name: Wait for Solr cache
  tags:
  - nodes
  - environment
  command: knife exec -E "nodes.search('chef_environment:_default') {|n| puts n.name}"
  register: output
  until: output.stdout == ""
  retries: 10
  delay: 10
  changed_when: output.stdout != ""

#- name: Add base role
#  tags:
#  - nodes
#  - runlist
#  command: knife node run_list add {{item}} "role[base]"
#  with_items: groups.cluster
#  changed_when: False
